{
  
    
        "post0": {
            "title": "Pandas Tips and Tricks",
            "content": "from IPython.display import Image . I spent an entire month answering pandas related StackOverflow question earning over 1,000 reputation. Below are some of the more useful methods outside the basics which can used to solve common occuring data transformation problems. . . import pandas as pd import numpy as np . np.where . A faster way to implement an if else condition . df = pd.DataFrame([&#39;Dog&#39;, &#39;Cat&#39;] * 2, columns=[&#39;Adult&#39;]) df . Adult . 0 | Dog | . 1 | Cat | . 2 | Dog | . 3 | Cat | . df[&#39;Baby&#39;] = np.where(df[&#39;Adult&#39;].eq(&#39;Dog&#39;), &#39;Puppy&#39;, &#39;Kitten&#39;) df . Adult Baby . 0 | Dog | Puppy | . 1 | Cat | Kitten | . 2 | Dog | Puppy | . 3 | Cat | Kitten | . np.select . An alternative to np.where when you have multiple conditions . df = pd.DataFrame({&quot;color&quot; : [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;, &quot;white&quot;, &quot;purple&quot;]}) df . color . 0 | red | . 1 | green | . 2 | blue | . 3 | black | . 4 | white | . 5 | purple | . conditions = [df.color.isin([&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]), df.color.eq(&#39;black&#39;) | df.color.eq(&#39;white&#39;)] # create a list of choices, if both conditions are True then the first choice is choosen choices = [&#39;rgb&#39;, &#39;b&amp;w&#39;] df[&#39;category&#39;] = np.select(condlist=conditions, choicelist=choices, default=df.color) df . color category . 0 | red | rgb | . 1 | green | rgb | . 2 | blue | rgb | . 3 | black | b&amp;w | . 4 | white | b&amp;w | . 5 | purple | purple | . def func(df): if df.color in [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]: return &#39;rgb&#39; elif df.color == &#39;black&#39; or df.color == &#39;white&#39;: return &#39;b&amp;w&#39; else: return df.color df[&#39;category&#39;] = df.apply(func, axis=1) df . color category . 0 | red | rgb | . 1 | green | rgb | . 2 | blue | rgb | . 3 | black | b&amp;w | . 4 | white | b&amp;w | . 5 | purple | purple | . Mask / Where . A quick way to return a value when a condition is (not) met. . https://stackoverflow.com/questions/51982417/pandas-mask-where-methods-versus-numpy-np-where . df = pd.DataFrame([[&#39;1&#39;, 10], [&#39;1&#39;, 30], [&#39;1&#39;, 10], [&#39;2&#39;, 40], [&#39;2&#39;, 40], [&#39;2&#39;, 40], [&#39;3&#39;, 20], [&#39;3&#39;, 40], [&#39;3&#39;, 10]], columns=(&#39;id&#39;, &#39;sample&#39;)) df . id sample . 0 | 1 | 10 | . 1 | 1 | 30 | . 2 | 1 | 10 | . 3 | 2 | 40 | . 4 | 2 | 40 | . 5 | 2 | 40 | . 6 | 3 | 20 | . 7 | 3 | 40 | . 8 | 3 | 10 | . df.mask(df[&#39;id&#39;].eq(&#39;2&#39;), &#39;mask&#39;) . id sample . 0 | 1 | 10 | . 1 | 1 | 30 | . 2 | 1 | 10 | . 3 | mask | mask | . 4 | mask | mask | . 5 | mask | mask | . 6 | 3 | 20 | . 7 | 3 | 40 | . 8 | 3 | 10 | . df.where(df[&#39;id&#39;].eq(&#39;2&#39;), &#39;where&#39;) . id sample . 0 | where | where | . 1 | where | where | . 2 | where | where | . 3 | 2 | 40 | . 4 | 2 | 40 | . 5 | 2 | 40 | . 6 | where | where | . 7 | where | where | . 8 | where | where | . Align dummy columns between train and test sets . In machine learning, your train and test sets may become misaligned when creating dummy columns. This will result in an error. . https://stackoverflow.com/questions/58136267/check-reference-list-in-pandas-column-using-numpy-vectorization . df = pd.DataFrame([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Z&#39;, &#39;A&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;X&#39;, &#39;Y&#39;], columns=[&#39;Letter&#39;]) df . Letter . 0 | A | . 1 | B | . 2 | C | . 3 | Z | . 4 | A | . 5 | C | . 6 | D | . 7 | E | . 8 | X | . 9 | Y | . train = pd.get_dummies(df.iloc[:4]) train . Letter_A Letter_B Letter_C Letter_Z . 0 | 1 | 0 | 0 | 0 | . 1 | 0 | 1 | 0 | 0 | . 2 | 0 | 0 | 1 | 0 | . 3 | 0 | 0 | 0 | 1 | . test = pd.get_dummies(df.iloc[4:]) test . Letter_A Letter_C Letter_D Letter_E Letter_X Letter_Y . 4 | 1 | 0 | 0 | 0 | 0 | 0 | . 5 | 0 | 1 | 0 | 0 | 0 | 0 | . 6 | 0 | 0 | 1 | 0 | 0 | 0 | . 7 | 0 | 0 | 0 | 1 | 0 | 0 | . 8 | 0 | 0 | 0 | 0 | 1 | 0 | . 9 | 0 | 0 | 0 | 0 | 0 | 1 | . test = test.reindex(columns=train.columns, fill_value=0) test . Letter_A Letter_B Letter_C Letter_Z . 4 | 1 | 0 | 0 | 0 | . 5 | 0 | 0 | 1 | 0 | . 6 | 0 | 0 | 0 | 0 | . 7 | 0 | 0 | 0 | 0 | . 8 | 0 | 0 | 0 | 0 | . 9 | 0 | 0 | 0 | 0 | . Understanding Groupby . Grouping your data can solve a lot of transformation challenges. It&#39;s a good idea to understand how it works. . https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html . df = pd.DataFrame({ &#39;Name&#39;: [&#39;David&#39;, &#39;David&#39;, &#39;Steve&#39; ,&#39;Harry&#39;, &#39;Harry&#39;], &#39;Zip Code&#39;: [55555, 55555, 44444, 55555, 66666] }) df . Name Zip Code . 0 | David | 55555 | . 1 | David | 55555 | . 2 | Steve | 44444 | . 3 | Harry | 55555 | . 4 | Harry | 66666 | . group = df.groupby(&#39;Name&#39;) . for key, dataframe in group: print(f&#39;{key} n {dataframe} n&#39;) . David Name Zip Code 0 David 55555 1 David 55555 Harry Name Zip Code 3 Harry 55555 4 Harry 66666 Steve Name Zip Code 2 Steve 44444 . group.apply(lambda x: type(x)) . Name David &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Harry &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Steve &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; dtype: object . Groupby Filtering . If you want to select subsets of data within each group you can use filter. . https://stackoverflow.com/questions/58453245/pandas-match-and-unmatch-on-differnt-columns-in-python . df = pd.DataFrame({ &#39;Name&#39;: [&#39;David&#39;, &#39;David&#39;, &#39;Steve&#39; ,&#39;Harry&#39;, &#39;Harry&#39;], &#39;Zip Code&#39;: [55555, 55555, 44444, 55555, 66666] }) df . Name Zip Code . 0 | David | 55555 | . 1 | David | 55555 | . 2 | Steve | 44444 | . 3 | Harry | 55555 | . 4 | Harry | 66666 | . df.groupby(&#39;Name&#39;).nunique() . Name Zip Code . Name . David | 1 | 1 | . Harry | 1 | 2 | . Steve | 1 | 1 | . df.groupby(&#39;Name&#39;).filter(lambda x: x[&#39;Zip Code&#39;].nunique() &gt; 1) # alternative using transform df[(df.groupby(&#39;Name&#39;).transform(&#39;nunique&#39;) &gt; 1).values] . Name Zip Code . 3 | Harry | 55555 | . 4 | Harry | 66666 | . Groupby Transform . Returns an aggregated result of the same size of the original dataframe . df = pd.DataFrame({ &#39;Name&#39;: [&#39;David&#39;, &#39;David&#39;, &#39;Steve&#39; ,&#39;Harry&#39;, &#39;Harry&#39;], &#39;Count&#39;: [10, 15, 20, 25, 5] }) df . Name Count . 0 | David | 10 | . 1 | David | 15 | . 2 | Steve | 20 | . 3 | Harry | 25 | . 4 | Harry | 5 | . df.groupby(&#39;Name&#39;).sum() . Count . Name . David | 25 | . Harry | 30 | . Steve | 20 | . df[&#39;Total&#39;] = df.groupby(&#39;Name&#39;).transform(&#39;sum&#39;) df . Name Count Total . 0 | David | 10 | 25 | . 1 | David | 15 | 25 | . 2 | Steve | 20 | 20 | . 3 | Harry | 25 | 30 | . 4 | Harry | 5 | 30 | . Convert an Uneven Dictonary or List to a Dataframe . https://stackoverflow.com/questions/19736080/creating-dataframe-from-a-dictionary-where-entries-have-different-lengths . d = dict( A = np.array([1,2]), B = np.array([1,2,3,4]) ) d . {&#39;A&#39;: array([1, 2]), &#39;B&#39;: array([1, 2, 3, 4])} . pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in d.items() ])) . A B . 0 | 1.0 | 1 | . 1 | 2.0 | 2 | . 2 | NaN | 3 | . 3 | NaN | 4 | . mylist = [[1,2,3], [4,5], 6] mylist . [[1, 2, 3], [4, 5], 6] . pd.DataFrame([ pd.Series(value) for value in mylist ]) . 0 1 2 . 0 | 1.0 | 2.0 | 3.0 | . 1 | 4.0 | 5.0 | NaN | . 2 | 6.0 | NaN | NaN | . Convert Uneven List of Tuples to a Dataframe . https://stackoverflow.com/questions/58450965/list-of-lists-conversion-to-pandas-dataframe . data = [ [(&#39;category&#39;, &#39;evaluation&#39;), (&#39;polarity&#39;, &#39;pos&#39;), (&#39;strength&#39;, &#39;1&#39;), (&#39;type&#39;, &#39;good&#39;)], [(&#39;category&#39;, &#39;intensifier&#39;), (&#39;type&#39;, &#39;shifter&#39;)], [(&#39;category&#39;, &#39;evaluation&#39;), (&#39;polarity&#39;, &#39;pos&#39;), (&#39;strength&#39;, &#39;2&#39;), (&#39;type&#39;, &#39;good&#39;)] ] . [dict(e) for e in data] . [{&#39;category&#39;: &#39;evaluation&#39;, &#39;polarity&#39;: &#39;pos&#39;, &#39;strength&#39;: &#39;1&#39;, &#39;type&#39;: &#39;good&#39;}, {&#39;category&#39;: &#39;intensifier&#39;, &#39;type&#39;: &#39;shifter&#39;}, {&#39;category&#39;: &#39;evaluation&#39;, &#39;polarity&#39;: &#39;pos&#39;, &#39;strength&#39;: &#39;2&#39;, &#39;type&#39;: &#39;good&#39;}] . df = pd.DataFrame(data=[dict(e) for e in data]) df . category polarity strength type . 0 | evaluation | pos | 1 | good | . 1 | intensifier | NaN | NaN | shifter | . 2 | evaluation | pos | 2 | good | . Decay ffill . A vectorized implementation of a custom forward fill function. . https://stackoverflow.com/questions/58404949/how-to-speed-up-a-decay-ffill-function-for-pandas-series . s = pd.Series([0,0, 10, 15, 0,0,25,0,0,20]) . s . 0 0 1 0 2 10 3 15 4 0 5 0 6 25 7 0 8 0 9 20 dtype: int64 . decay = 0.8 (s.mask(s.eq(0)).ffill() * decay ** s.groupby(s.ne(0).cumsum()).cumcount()).fillna(0) . 0 0.0 1 0.0 2 10.0 3 15.0 4 12.0 5 9.6 6 25.0 7 20.0 8 16.0 9 20.0 dtype: float64 . Create Columns in a Loop . https://stackoverflow.com/questions/58364225/grouping-by-and-applying-lambda-with-condition-for-the-first-row-pandas . df = pd.DataFrame(np.arange(1,6), columns=[&#39;number&#39;]) df . number . 0 | 1 | . 1 | 2 | . 2 | 3 | . 3 | 4 | . 4 | 5 | . for num in df.number: df[f&#39;number x {num}&#39;] = num * df.number df . number number x 1 number x 2 number x 3 number x 4 number x 5 . 0 | 1 | 1 | 2 | 3 | 4 | 5 | . 1 | 2 | 2 | 4 | 6 | 8 | 10 | . 2 | 3 | 3 | 6 | 9 | 12 | 15 | . 3 | 4 | 4 | 8 | 12 | 16 | 20 | . 4 | 5 | 5 | 10 | 15 | 20 | 25 | . Explode . Transform List Like Elements into individual rows . (only v.25 and above) . pd.__version__ . &#39;0.25.1&#39; . df = pd.DataFrame([[[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]], [[&#39;D&#39;, &#39;E&#39;, &#39;F&#39;]]], columns=[&#39;lists&#39;]) df . lists . 0 | [A, B, C] | . 1 | [D, E, F] | . df.explode(&#39;lists&#39;) . lists . 0 | A | . 0 | B | . 0 | C | . 1 | D | . 1 | E | . 1 | F | . Expand Dataframe based on a Date Range . Expand Dataframe to range of Dates and fill values . df = pd.DataFrame({ &#39;Date&#39;: [&#39;2018-01-01&#39;, &#39;2018-01-03&#39;], &#39;Product&#39;: [&#39;A&#39;, &#39;B&#39;] } ) df[&#39;Date&#39;] = pd.to_datetime(df[&#39;Date&#39;]) df . Date Product . 0 | 2018-01-01 | A | . 1 | 2018-01-03 | B | . df = df.set_index(&#39;Date&#39;) df . Product . Date . 2018-01-01 | A | . 2018-01-03 | B | . date_range = pd.date_range(start=df.index.min(), end=pd.DateOffset(days=1) + df.index.max()) date_range . DatetimeIndex([&#39;2018-01-01&#39;, &#39;2018-01-02&#39;, &#39;2018-01-03&#39;, &#39;2018-01-04&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) . df.reindex(date_range).ffill() . Product . 2018-01-01 | A | . 2018-01-02 | A | . 2018-01-03 | B | . 2018-01-04 | B | . Wide to Long . Similar to melt but can handle prefixed column names . https://stackoverflow.com/questions/58135102/pivot-tables-on-python . df = pd.DataFrame( {&#39;date&#39;: [&#39;1/1/11&#39;, &#39;2/1/11&#39;, &#39;3/1/11&#39;], &#39;online_won&#39;: [9, 1, 10], &#39;retail_won&#39;: [10, 2, 8], &#39;outbound_won&#39;: [11, 13, 14], &#39;online_leads&#39;: [12, 15, 17], &#39;retail_leads&#39;: [14.0, np.nan, np.nan], &#39;outbound_leads&#39;: [np.nan, np.nan, np.nan]} ) df . date online_won retail_won outbound_won online_leads retail_leads outbound_leads . 0 | 1/1/11 | 9 | 10 | 11 | 12 | 14.0 | NaN | . 1 | 2/1/11 | 1 | 2 | 13 | 15 | NaN | NaN | . 2 | 3/1/11 | 10 | 8 | 14 | 17 | NaN | NaN | . df.columns = [&#39;_&#39;.join(x.split(&#39;_&#39;)[::-1]) for x in df.columns ] df.columns . Index([&#39;date&#39;, &#39;won_online&#39;, &#39;won_retail&#39;, &#39;won_outbound&#39;, &#39;leads_online&#39;, &#39;leads_retail&#39;, &#39;leads_outbound&#39;], dtype=&#39;object&#39;) . df = pd.wide_to_long(df, [&#39;won&#39;,&#39;leads&#39;], &#39;date&#39;, &#39;source&#39;, sep=&#39;_&#39;, suffix=&#39; w+&#39;) df . won leads . date source . 1/1/11 | online | 9 | 12.0 | . 2/1/11 | online | 1 | 15.0 | . 3/1/11 | online | 10 | 17.0 | . 1/1/11 | retail | 10 | 14.0 | . 2/1/11 | retail | 2 | NaN | . 3/1/11 | retail | 8 | NaN | . 1/1/11 | outbound | 11 | NaN | . 2/1/11 | outbound | 13 | NaN | . 3/1/11 | outbound | 14 | NaN | . Rolling Mean . s = pd.Series(np.arange(1,10)) s . 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 dtype: int32 . s.expanding().mean() . 0 1.0 1 1.5 2 2.0 3 2.5 4 3.0 5 3.5 6 4.0 7 4.5 8 5.0 dtype: float64 . s.cumsum() / (s.index.values + 1) . 0 1.0 1 1.5 2 2.0 3 2.5 4 3.0 5 3.5 6 4.0 7 4.5 8 5.0 dtype: float64 . Rank Multiple Columns . https://stackoverflow.com/questions/58136881/compute-rank-average-for-multiple-columns-manually . df = pd.DataFrame(data={&#39;String&#39;:[&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;],&#39;Integer&#39;:[1,2,3,3,1]}) df . String Integer . 0 | a | 1 | . 1 | a | 2 | . 2 | a | 3 | . 3 | a | 3 | . 4 | b | 1 | . df = df.sort_values([&#39;String&#39;,&#39;Integer&#39;], ascending=[True, False]) df . String Integer . 2 | a | 3 | . 3 | a | 3 | . 1 | a | 2 | . 0 | a | 1 | . 4 | b | 1 | . df[&#39;rank&#39;] = np.arange(len(df)) + 1 df . String Integer rank . 2 | a | 3 | 1 | . 3 | a | 3 | 2 | . 1 | a | 2 | 3 | . 0 | a | 1 | 4 | . 4 | b | 1 | 5 | . df[&#39;rank&#39;] = df.groupby([&#39;String&#39;, &#39;Integer&#39;])[&#39;rank&#39;].transform(&#39;mean&#39;) df . String Integer rank . 2 | a | 3 | 1.5 | . 3 | a | 3 | 1.5 | . 1 | a | 2 | 3.0 | . 0 | a | 1 | 4.0 | . 4 | b | 1 | 5.0 | . df[&#39;rank&#39;] = df.groupby([&#39;String&#39;, &#39;Integer&#39;], sort=False).ngroup().rank() df . String Integer rank . 2 | a | 3 | 1.5 | . 3 | a | 3 | 1.5 | . 1 | a | 2 | 3.0 | . 0 | a | 1 | 4.0 | . 4 | b | 1 | 5.0 | . Select Dates Ignoring Year . Slice Dataframe between two dates ignoring years . https://stackoverflow.com/questions/58117659/select-rows-in-pandas-dataframe-between-dates-regardless-of-year . df = pd.DataFrame({&#39;date&#39;: pd.date_range(&#39;2016-09-01&#39;,&#39;2019-09-01&#39;, freq=&#39;D&#39;)}) df.head() . date . 0 | 2016-09-01 | . 1 | 2016-09-02 | . 2 | 2016-09-03 | . 3 | 2016-09-04 | . 4 | 2016-09-05 | . s = df.date.dt.strftime(&#39;%m%d&#39;).astype(int) s.head() . 0 901 1 902 2 903 3 904 4 905 Name: date, dtype: int32 . df[s.between(316,318)] . date . 196 | 2017-03-16 | . 197 | 2017-03-17 | . 198 | 2017-03-18 | . 561 | 2018-03-16 | . 562 | 2018-03-17 | . 563 | 2018-03-18 | . 926 | 2019-03-16 | . 927 | 2019-03-17 | . 928 | 2019-03-18 | . Split a Dataframe np.split . df = pd.DataFrame({&#39;A&#39;:np.arange(10), &#39;B&#39;:np.arange(10)}) df . A B . 0 | 0 | 0 | . 1 | 1 | 1 | . 2 | 2 | 2 | . 3 | 3 | 3 | . 4 | 4 | 4 | . 5 | 5 | 5 | . 6 | 6 | 6 | . 7 | 7 | 7 | . 8 | 8 | 8 | . 9 | 9 | 9 | . df1, df2 = np.split(df, 2) . df1 . A B . 0 | 0 | 0 | . 1 | 1 | 1 | . 2 | 2 | 2 | . 3 | 3 | 3 | . 4 | 4 | 4 | . df2 . A B . 5 | 5 | 5 | . 6 | 6 | 6 | . 7 | 7 | 7 | . 8 | 8 | 8 | . 9 | 9 | 9 | . pd.concat([df1,df2.reset_index(drop=True)], axis=1) . A B A B . 0 | 0 | 0 | 5 | 5 | . 1 | 1 | 1 | 6 | 6 | . 2 | 2 | 2 | 7 | 7 | . 3 | 3 | 3 | 8 | 8 | . 4 | 4 | 4 | 9 | 9 | . Apply function with multiple arguments . https://stackoverflow.com/questions/58089770/using-apply-function-dataframe . import math x = [-0.75853, -0.75853, -0.75853, -0.75852] y = [-0.63435, -0.63434, -0.63435, -0.63436] z = [-0.10488, -0.10490, -0.10492, -0.10495] w = [-0.10597, -0.10597, -0.10597, -0.10596] df = pd.DataFrame([x, y, z, w], columns=[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;w&#39;]) df . x y z w . 0 | -0.75853 | -0.75853 | -0.75853 | -0.75852 | . 1 | -0.63435 | -0.63434 | -0.63435 | -0.63436 | . 2 | -0.10488 | -0.10490 | -0.10492 | -0.10495 | . 3 | -0.10597 | -0.10597 | -0.10597 | -0.10596 | . def roll(qw, qx, qy, qz, var=10): # x-axis rotation sinr_cosp = +2.0 * (qw * qx + qy + qz) cosr_cosp = +1.0 - 2.0 * (qx * qx + qy * qy) roll = math.atan2(sinr_cosp, cosr_cosp) return roll * var df.apply(lambda x : roll(x[&#39;w&#39;], x[&#39;x&#39;], x[&#39;y&#39;], x[&#39;z&#39;], 20), axis=1) . 0 -43.509430 1 -38.182063 2 -7.883262 3 -7.957697 dtype: float64 . def roll(df, var=10): # x-axis rotation sinr_cosp = +2.0 * (df.w * df.x + df.y + df.z) cosr_cosp = +1.0 - 2.0 * (df.x * df.x + df.y * df.y) roll = math.atan2(sinr_cosp, cosr_cosp) return roll * var df.apply(roll, args=(2,), axis=1) . 0 -4.350943 1 -3.818206 2 -0.788326 3 -0.795770 dtype: float64 . Custom Styling . https://stackoverflow.com/questions/58087857/applying-pandas-styles-to-arbitrary-non-product-subsets-of-a-dataframe . df = pd.DataFrame(data={&#39;A&#39;: [0, 1, np.nan], &#39;B&#39;: [.5, np.nan, 0], &#39;C&#39;: [np.nan, 1, 1]}) df . A B C . 0 | 0.0 | 0.5 | NaN | . 1 | 1.0 | NaN | 1.0 | . 2 | NaN | 0.0 | 1.0 | . from matplotlib.cm import get_cmap cmap = get_cmap(&#39;PuBu&#39;) # update with low-high option def threshold(x,low=0,high=1,mid=0.5): # nan cell if np.isnan(x): return &#39;&#39; # non-nan cell x = (x-low)/(high-low) background = f&#39;background-color: rgba{cmap (x, bytes=True)}&#39; text_color = f&#39;color: white&#39; if x &gt; mid else &#39;&#39; return background+&#39;;&#39;+text_color # apply the style df.style.applymap(threshold, low=-1, high=1, mid=0.3) . A B C . 0 0 | 0.5 | nan | . 1 1 | nan | 1 | . 2 nan | 0 | 1 | . Reverse an Array . https://stackoverflow.com/questions/6771428/most-efficient-way-to-reverse-a-numpy-array . np.arange(1,11) . array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . np.arange(1,11)[::-1] . array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . X = np.arange(1,11).reshape(2,5) X . array([[ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10]]) . np.fliplr(X) . array([[ 5, 4, 3, 2, 1], [10, 9, 8, 7, 6]]) . Symmetric difference . Values not common to both . https://stackoverflow.com/questions/45845965/python-compare-two-columns-of-features-return-values-which-are-not-common-to . df1 = pd.DataFrame({&#39;a&#39;:[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;x&#39;, &#39;d&#39;, &#39;l&#39;, &#39;z&#39;]}) df1 . a . 0 | a | . 1 | b | . 2 | c | . 3 | x | . 4 | d | . 5 | l | . 6 | z | . df2 = pd.DataFrame({&#39;b&#39;: [&#39;b&#39;, &#39;a&#39;, &#39;d&#39;, &#39;c&#39;, &#39;y&#39;]}) df2 . b . 0 | b | . 1 | a | . 2 | d | . 3 | c | . 4 | y | . pd.Index.symmetric_difference(pd.Index(df1.a), pd.Index(df2.b)).values . array([&#39;l&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;], dtype=object) . np.setdiff1d(np.union1d(df1.a, df2.b), np.intersect1d(df1.a, df2.b)) . array([&#39;l&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;], dtype=object) . Transpose a 3D array . https://stackoverflow.com/questions/32034237/how-does-numpys-transpose-method-permute-the-axes-of-an-array . two_d = np.arange(16).reshape(8,2) print(two_d.shape) print(two_d.transpose().shape) . (8, 2) (2, 8) . three_d = np.arange(20).reshape((1, 4, 5)) print(three_d.shape) print(three_d.transpose(1,0,2).shape) print(three_d.transpose(2,1,0).shape) print(three_d.transpose(0,1,2).shape) . (1, 4, 5) (4, 1, 5) (5, 4, 1) (1, 4, 5) . literal eval . Convert a string representation of a list into a list . https://stackoverflow.com/questions/23111990/pandas-dataframe-stored-list-as-string-how-to-convert-back-to-list . from ast import literal_eval df = pd.DataFrame({&#39;list&#39;:[&#39;[1,2,3]&#39;, &#39;[5,6,7]&#39;]}) df . list . 0 | [1,2,3] | . 1 | [5,6,7] | . df.list.map(lambda x: type(x)) . 0 &lt;class &#39;str&#39;&gt; 1 &lt;class &#39;str&#39;&gt; Name: list, dtype: object . df.list.map(lambda x: type(literal_eval(x))) . 0 &lt;class &#39;list&#39;&gt; 1 &lt;class &#39;list&#39;&gt; Name: list, dtype: object . Difference between Nan and None . https://stackoverflow.com/questions/17534106/what-is-the-difference-between-nan-and-none . str accessor . s = pd.Series([&#39;ABC&#39;,&#39;DEF&#39;]) s . 0 ABC 1 DEF dtype: object . s.str.contains(&#39;A&#39;) . 0 True 1 False dtype: bool . s.str.contains(&#39;A|E&#39;) # A or E . 0 True 1 True dtype: bool . s.str[::-1] . 0 CBA 1 FED dtype: object . s.str[:2] . 0 AB 1 DE dtype: object . Regular Expression . https://stackoverflow.com/questions/4736/learning-regular-expressions . Cartesian Product . df_A = pd.DataFrame({&#39;A&#39;:[1,2,3]}) df_B = pd.DataFrame({&#39;B&#39;:[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]}) . df_A . A . 0 | 1 | . 1 | 2 | . 2 | 3 | . df_B . B . 0 | A | . 1 | B | . 2 | C | . df_A.assign(key=1).merge(df_B.assign(key=1), on=&#39;key&#39;).drop(&#39;key&#39;, axis=1) . A B . 0 | 1 | A | . 1 | 1 | B | . 2 | 1 | C | . 3 | 2 | A | . 4 | 2 | B | . 5 | 2 | C | . 6 | 3 | A | . 7 | 3 | B | . 8 | 3 | C | . to_frame . Maintain a Dataframe Object . df = pd.DataFrame({&#39;A&#39;:[1,2,3]}) df . A . 0 | 1 | . 1 | 2 | . 2 | 3 | . df.A . 0 1 1 2 2 3 Name: A, dtype: int64 . print(type(df.A)) . &lt;class &#39;pandas.core.series.Series&#39;&gt; . df.A.to_frame() . A . 0 | 1 | . 1 | 2 | . 2 | 3 | . type(df.A.to_frame()) . pandas.core.frame.DataFrame . Date Manipulation . dates = pd.Series(pd.to_datetime([&#39;1/1/2016&#39;, &#39;12/15/2017&#39;, &#39;10/31/2019&#39;])) dates . 0 2016-01-01 1 2017-12-15 2 2019-10-31 dtype: datetime64[ns] . dates + pd.DateOffset(day=1) . C: ProgramData Anaconda3 lib site-packages pandas core arrays datetimes.py:837: PerformanceWarning: Non-vectorized DateOffset being applied to Series or DatetimeIndex PerformanceWarning, . 0 2016-01-01 1 2017-12-01 2 2019-10-01 dtype: datetime64[ns] . dates + pd.offsets.MonthEnd(0) . 0 2016-01-31 1 2017-12-31 2 2019-10-31 dtype: datetime64[ns] . dates.dt.month . 0 1 1 12 2 10 dtype: int64 . dates.dt.day_name() . 0 Friday 1 Friday 2 Thursday dtype: object . Total Seconds . Calculate total seconds between to datetimes . (pd.to_datetime(&#39;1/5/2019 00:01:35&#39;) - pd.to_datetime(&#39;1/1/2019 00:05:00&#39;)).seconds . 86195 . (pd.to_datetime(&#39;1/5/2019 00:01:35&#39;) - pd.to_datetime(&#39;1/1/2019 00:05:00&#39;)).total_seconds() . 345395.0 .",
            "url": "https://gardnmi.github.io/blog/jupyter/2020/10/18/stack-overflow-tips-and-tricks.html",
            "relUrl": "/jupyter/2020/10/18/stack-overflow-tips-and-tricks.html",
            "date": " • Oct 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gardnmi.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gardnmi.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gardnmi.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gardnmi.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}